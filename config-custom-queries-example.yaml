# ============================================================================
# CUSTOM QUERIES EXAMPLE - Define your own metrics!
# ============================================================================
# Use this when you need metrics beyond the 300+ built-in ones.
# Write any SQL query and export as OpenTelemetry metrics.
#
# Use cases:
# - Cost analysis (query cost by user/warehouse)
# - Performance tracking (table scan efficiency)
# - Security monitoring (failed login patterns)
# ============================================================================

receivers:
  snowflake:
    user: "YOUR_SNOWFLAKE_USER"
    password: "YOUR_SNOWFLAKE_PASSWORD"
    account: "your-account-name"
    warehouse: "COMPUTE_WH"
    database: "SNOWFLAKE"
    schema: "ACCOUNT_USAGE"
    
    # Standard metrics (minimal)
    metrics:
      current_queries:
        enabled: true
        interval: "1m"
      warehouse_load:
        enabled: false
      query_history:
        enabled: true
        interval: "5m"
      credit_usage:
        enabled: true
        interval: "5m"
      storage_metrics:
        enabled: false
      login_history:
        enabled: false
      data_pipeline:
        enabled: false
      database_storage:
        enabled: false
      task_history:
        enabled: false
      replication_usage:
        enabled: false
      auto_clustering_history:
        enabled: false
    
    event_tables:
      enabled: false
    
    organization:
      enabled: false
    
    # CUSTOM SQL QUERIES - Universal examples that work everywhere! ðŸŽ¯
    custom_queries:
      enabled: true
      queries:
        # Example 1: Query count by type (simple aggregation)
        - name: "queries_by_type"
          interval: "5m"
          metric_type: "gauge"
          value_column: "QUERY_COUNT"
          label_columns: ["QUERY_TYPE", "WAREHOUSE_NAME"]
          sql: |
            SELECT 
              QUERY_TYPE,
              WAREHOUSE_NAME,
              COUNT(*) as QUERY_COUNT
            FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
            WHERE START_TIME >= DATEADD(hour, -1, CURRENT_TIMESTAMP())
            GROUP BY QUERY_TYPE, WAREHOUSE_NAME
        
        # Example 2: Failed queries by user
        - name: "failed_queries_by_user"
          interval: "10m"
          metric_type: "gauge"
          value_column: "FAILURE_COUNT"
          label_columns: ["USER_NAME", "WAREHOUSE_NAME"]
          sql: |
            SELECT 
              USER_NAME,
              WAREHOUSE_NAME,
              COUNT(*) as FAILURE_COUNT
            FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
            WHERE START_TIME >= DATEADD(hour, -1, CURRENT_TIMESTAMP())
              AND EXECUTION_STATUS = 'FAIL'
            GROUP BY USER_NAME, WAREHOUSE_NAME
        
        # Example 3: Average query execution time by warehouse
        - name: "avg_query_time_by_warehouse"
          interval: "5m"
          metric_type: "gauge"
          value_column: "AVG_EXECUTION_TIME_MS"
          label_columns: ["WAREHOUSE_NAME"]
          sql: |
            SELECT 
              WAREHOUSE_NAME,
              AVG(TOTAL_ELAPSED_TIME) as AVG_EXECUTION_TIME_MS
            FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
            WHERE START_TIME >= DATEADD(hour, -1, CURRENT_TIMESTAMP())
              AND WAREHOUSE_NAME IS NOT NULL
            GROUP BY WAREHOUSE_NAME

processors:
  batch:
    timeout: 10s

exporters:
  otlphttp:
    endpoint: "https://YOUR_TENANT.live.dynatrace.com/api/v2/otlp"
    headers:
      Authorization: "Api-Token YOUR_DYNATRACE_API_TOKEN"

service:
  pipelines:
    metrics:
      receivers: [snowflake]
      processors: [batch]
      exporters: [otlphttp]
